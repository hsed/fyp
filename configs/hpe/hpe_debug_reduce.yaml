# note at this current stage it is left at testing msra dataset with rot+none aug for both train and pca
# better use fp (--force-pca) flag also the very next thing to do is try replacing new augmentation transforms or basically
# all transforms with original transforms you made for msra.... and do rot+None and see if results are better...

# we also need to test pca changes so with pca_eval true u shuld get original curve and then with false u shuld get
# same avg3d error maybe different validation error
# crop ver 4 and 5 CoM NO LONGER requires to be in center, we can now safely use wrist as CoM
# need to test which is better also test if we should still stick to MCP as CoM or change to wrist
# so first change back to MCP test 4 or 5;; and to wrist test 4 or 5

name: BaselineHPE
n_gpu: 1
dtype: float


arch:
  type: DeepPriorPPModel
  args:
    input_channels: 1
    pca_components: 30
    dropout_prob: 0.3
    train_mode: true
    init_w: true
    eval_pca_space: false


data_loader:
  type: DepthJointsDataLoader
  args:
    data_dir: datasets/hand_pose_action
    dataset_type: train
    use_wrist_com: false #true #false #true # false
    eval_pca_space: false
    batch_size: 128
    pca_components: 30
    use_pca_cache: true
    num_workers: 0
    debug: false #true #false #use true to see plots
    reduce: true
    preload_depth: false #true now this is not neede, after first epoch preloading is automatically done
    pca_overwrite_cache: false #true
    use_msra: false #true #true #false #true #false #true #false
    pca_size: 5000 #200000
    validation_split: -0.2 #-1.0 #0.2 #-1.0
    shuffle: false # this can only be used if val split <= 0, if >0 then the shuffling is handled by randomsampler
    randomise_params: false #false # true <false> ensures even after augmentation exactly same data is loaded every epoch!
    crop_depth_ver: 2 #4 #2 #4 #4 #3 #2 #0 #1 #3 #0 #0 #2 #0 #2 #0 #2 # 0 # 1, 2, 3 (with wrist as com only 4 or 5 must be used!)
    crop_pad_3d: [30., 30., 100.] # FOR 3D CROPPING [MM, MM, MM]
    crop_pad_2d: [40, 40, 100.] # FOR 2D CROPPING [PX, PX, MM]
    cube_side_mm: 200 #190
    data_aug: # None: 0, Rot: 1; Sc: 2; Trans: 3;
      - 0
      #- 1 #3 #1
      #s- 2
      #- 3
    pca_data_aug:
      - 0
      #- 1 #3 #1
      #- 2
      #- 3
    use_orig_transformers: false #true #false #true # true
    use_orig_transformers_pca: false #true #false #true # true


optimizer:
  type: Adam
  args:
    lr: 0.001
    weight_decay: 0
    amsgrad: false #true
loss: mse_loss
metrics: [Avg3DError]
lr_scheduler:
  # type: StepLR
  # args:
  #   step_size: 50
  #   gamma: 0.1


trainer:
  epochs: 20 #20 #10 #10 #20 #5 #15 #50 # 10 #50
  save_dir: saved/
  save_period: 500 #5 #10 #2 #10 # keep it big to avoid space, issue we can just save best weights
  verbosity: 2
  persistent_storage: false
  #monitor: "min val_avg_3d_err_mm" #"min val_loss" for best weights and early stopping
  early_stop: 5 #20 #10 #20
  tensorboardX: false
  log_dir: logs #saved/logs
  only_save: true